// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name APIHeartRate
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public protocol HRRemotePeripheralDelegate : AnyObject {
  func remotePeripheral(_ remotePeripheral: APIHeartRate.BleDevice, didUpdateName name: Swift.String)
  func remotePeripheralIsReady(_ remotePeripheral: APIHeartRate.BleDevice)
}
@_hasMissingDesignatedInitializers public class BleDevice : APIHeartRate.HRRemotePeer {
  public enum ReadType {
    case battery, manufacturer, model, hardware, firmware, software, sysid, mac
    public static func == (a: APIHeartRate.BleDevice.ReadType, b: APIHeartRate.BleDevice.ReadType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum State {
    case shallow, disconnected, connecting, connected, disconnecting
    public static func == (a: APIHeartRate.BleDevice.State, b: APIHeartRate.BleDevice.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var state: APIHeartRate.BleDevice.State {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var macAddress: Swift.String
  weak public var peripheralDelegate: APIHeartRate.HRRemotePeripheralDelegate?
  public init(identifier: Foundation.UUID, peripheral: CoreBluetooth.CBPeripheral?)
  @objc deinit
}
public protocol HRCentralDelegate : AnyObject {
  func central(_ central: APIHeartRate.HRCentral, remotePeripheralDidDisconnect remotePeripheral: APIHeartRate.BleDevice)
}
@_inheritsConvenienceInitializers public class HRCentral : APIHeartRate.HRPeer, APIHeartRate.HRAvailabilityObservable {
  public typealias ScanProgressHandler = ((_ newDiscoveries: [APIHeartRate.BleDicoveryDevice]) -> Swift.Void)
  public typealias ScanCompletionHandler = ((_ result: [APIHeartRate.BleDicoveryDevice]?, _ error: APIHeartRate.BleConnectError?) -> Swift.Void)
  public typealias ContinuousScanChangeHandler = ((_ changes: [APIHeartRate.HRDiscoveriesChange], _ discoveries: [APIHeartRate.BleDicoveryDevice]) -> Swift.Void)
  public typealias ContinuousScanStateHandler = ((_ newState: APIHeartRate.HRCentral.ContinuousScanState) -> Swift.Void)
  public typealias ContinuousScanErrorHandler = ((_ error: APIHeartRate.BleConnectError) -> Swift.Void)
  public typealias ConnectCompletionHandler = ((_ remotePeripheral: APIHeartRate.BleDevice, _ error: APIHeartRate.BleConnectError?) -> Swift.Void)
  public enum ContinuousScanState {
    case stopped
    case scanning
    case waiting
    public static func == (a: APIHeartRate.HRCentral.ContinuousScanState, b: APIHeartRate.HRCentral.ContinuousScanState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var availability: APIHeartRate.BleAvailability? {
    get
  }
  public var connectedRemotePeripherals: [APIHeartRate.BleDevice] {
    get
  }
  weak public var delegate: APIHeartRate.HRCentralDelegate?
  public var availabilityObservers: [APIHeartRate.HRWeakAvailabilityObserver]
  public init()
  public func startWithConfiguration() throws
  public func scanWithDuration(_ duration: Foundation.TimeInterval = 0, updateDuplicates: Swift.Bool = false, progressHandler: APIHeartRate.HRCentral.ScanProgressHandler?, completionHandler: APIHeartRate.HRCentral.ScanCompletionHandler?)
  public func endScan()
  public func scanContinuouslyWithChangeHandler(_ changeHandler: @escaping APIHeartRate.HRCentral.ContinuousScanChangeHandler, stateHandler: APIHeartRate.HRCentral.ContinuousScanStateHandler?, duration: Foundation.TimeInterval = 3, inBetweenDelay: Foundation.TimeInterval = 3, updateDuplicates: Swift.Bool = false, errorHandler: APIHeartRate.HRCentral.ContinuousScanErrorHandler?)
  public func interruptScan()
  public func connect(_ timeout: Foundation.TimeInterval = 3, remotePeripheral: APIHeartRate.BleDevice, completionHandler: @escaping APIHeartRate.HRCentral.ConnectCompletionHandler)
  public func disconnectRemotePeripheral(_ remotePeripheral: APIHeartRate.BleDevice) throws
  public func stop() throws
  public func retrieveRemotePeripheralWithUUID(remoteUUID: Foundation.UUID) -> APIHeartRate.BleDevice?
  public func retrieveRemotePeripheralsWithUUIDs(remoteUUIDs: [Foundation.UUID]) -> [APIHeartRate.BleDevice]?
  @objc deinit
}
public class HRPeripheralConfiguration : APIHeartRate.HRConfiguration {
  final public let localName: Swift.String?
  public init(dataServiceUUID: Foundation.UUID, localName: Swift.String? = nil)
  @objc deinit
}
public enum BleCommonError : Swift.Error {
  case internalError(underlyingError: Swift.Error?)
  case serviceNotFound
  case receivedEmptyData
  case receivedWrongData
  case deviceNotFound
  case devieNotConnected
}
public enum BleConnectError : Swift.Error {
  case deviceNotFound
  case deviceNotConnected
  case scanFailed
  case failedToDisconnect(underlyingError: Swift.Error?)
  case failedToConnectDueToTimeout
  case interruptedByUnavailability(cause: APIHeartRate.BleUnavailabilityCause)
  case internalError(underlyingError: Swift.Error?)
}
public enum DeviceBleStatus {
  case connecting
  case connected
  case disconnecting
  case disconnected
  public static func == (a: APIHeartRate.DeviceBleStatus, b: APIHeartRate.DeviceBleStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BatteryStatus {
  case normal
  case charging
  case full
  case unknown
  public static func == (a: APIHeartRate.BatteryStatus, b: APIHeartRate.BatteryStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct FBKApiBaseInfo {
}
public struct HRInfo {
  public let time: Swift.String
  public let rateStr: Swift.String
}
public protocol APIHeartRateObserver {
  func devicePower(power: Swift.String, device: APIHeartRate.BleDevice)
  func deviceFirmware(version: Swift.String, device: APIHeartRate.BleDevice)
  func deviceHardware(version: Swift.String, device: APIHeartRate.BleDevice)
  func deviceSoftware(version: Swift.String, device: APIHeartRate.BleDevice)
  func privateVersion(version: [Swift.String : Swift.String], device: APIHeartRate.BleDevice)
  func privateMacAddress(mac: Swift.String, device: APIHeartRate.BleDevice)
  func deviceSystemData(systemData: Foundation.Data, device: APIHeartRate.BleDevice)
  func deviceModelString(modelString: Swift.String, device: APIHeartRate.BleDevice)
  func deviceSerialNumber(serialNumer: Swift.String, device: APIHeartRate.BleDevice)
  func deviceManufacturerName(manufacturerName: Swift.String, device: APIHeartRate.BleDevice)
  func deviceBaseInfo(baseInfo: APIHeartRate.FBKApiBaseInfo, device: APIHeartRate.BleDevice)
  func HRVResultData(hrvMap: [Swift.String : Swift.String], device: APIHeartRate.BleDevice)
  func armBandStepFrequency(frequencyDic: [Swift.String : Swift.String], device: APIHeartRate.BleDevice)
  func armBandTemperature(tempMap: [Swift.String : Swift.String], device: APIHeartRate.BleDevice)
  func armBandSPO2(spo2Map: [Swift.String : Swift.String], device: APIHeartRate.BleDevice)
  func armBandRealTimeHeartRate(hRInfo: APIHeartRate.HRInfo, device: APIHeartRate.BleDevice)
  func armBandMaxHeartRateUpdated()
  func armBandSystemTimeUpdated()
  func armBandBloodOxygen(num: Swift.Int, device: APIHeartRate.BleDevice)
  func armBandPlayStatusChange()
  func armBandResetFactory()
  func armBandUnbind()
  func batteryStatus(state: APIHeartRate.BatteryStatus)
  func heartRateInMeasuring()
  func bleConnectLog(logString: Swift.String, device: APIHeartRate.BleDevice?)
  func bleConnectStatus(status: APIHeartRate.DeviceBleStatus, device: APIHeartRate.BleDevice?)
  func bleConnectError(error: APIHeartRate.BleConnectError, device: APIHeartRate.BleDevice?)
  func didDiscoveryWith(devices: [APIHeartRate.BleDicoveryDevice])
  func didFinishDiscoveryWith(devices: [APIHeartRate.BleDicoveryDevice])
  func bleCommonError(error: APIHeartRate.BleCommonError)
  func bleAvailability(status: APIHeartRate.BleAvailability)
  func bleOtaError(error: APIHeartRate.OtaError)
  func bleOtaStauts(status: APIHeartRate.OtaStatus, progress: Swift.Float)
  func summaryHeartRateInfo(info: [[Swift.String : Any]])
  func summaryStepsInfo(info: [[Swift.String : Any]])
  func summaryBloodOxygenInfo(info: [[Swift.String : Any]])
  func summaryPressureIndexInfo(info: [[Swift.String : Any]])
  func summaryCalorieInfo(info: [[Swift.String : Any]])
  func summarySleepInfo(info: [[Swift.String : Any]])
  func summaryExerciseInfo(info: [[Swift.String : Any]])
  func motionDataInfo(info: [[Swift.String : Any]])
}
extension APIHeartRate.APIHeartRateObserver {
  public func devicePower(power: Swift.String, device: APIHeartRate.BleDevice)
  public func deviceFirmware(version: Swift.String, device: APIHeartRate.BleDevice)
  public func deviceHardware(version: Swift.String, device: APIHeartRate.BleDevice)
  public func deviceSoftware(version: Swift.String, device: APIHeartRate.BleDevice)
  public func privateVersion(version: [Swift.String : Swift.String], device: APIHeartRate.BleDevice)
  public func privateMacAddress(mac: Swift.String, device: APIHeartRate.BleDevice)
  public func deviceSystemData(systemData: Foundation.Data, device: APIHeartRate.BleDevice)
  public func deviceModelString(modelString: Swift.String, device: APIHeartRate.BleDevice)
  public func deviceSerialNumber(serialNumer: Swift.String, device: APIHeartRate.BleDevice)
  public func deviceManufacturerName(manufacturerName: Swift.String, device: APIHeartRate.BleDevice)
  public func deviceBaseInfo(baseInfo: APIHeartRate.FBKApiBaseInfo, device: APIHeartRate.BleDevice)
  public func HRVResultData(hrvMap: [Swift.String : Swift.String], device: APIHeartRate.BleDevice)
  public func armBandStepFrequency(frequencyDic: [Swift.String : Swift.String], device: APIHeartRate.BleDevice)
  public func armBandTemperature(tempMap: [Swift.String : Swift.String], device: APIHeartRate.BleDevice)
  public func armBandSPO2(spo2Map: [Swift.String : Swift.String], device: APIHeartRate.BleDevice)
  public func armBandRealTimeHeartRate(hRInfo: APIHeartRate.HRInfo, device: APIHeartRate.BleDevice)
  public func armBandMaxHeartRateUpdated()
  public func armBandSystemTimeUpdated()
  public func armBandBloodOxygen(num: Swift.Int, device: APIHeartRate.BleDevice)
  public func armBandPlayStatusChange()
  public func armBandResetFactory()
  public func armBandUnbind()
  public func batteryStatus(state: APIHeartRate.BatteryStatus)
  public func heartRateInMeasuring()
  public func bleConnectLog(logString: Swift.String, device: APIHeartRate.BleDevice?)
  public func bleConnectStatus(status: APIHeartRate.DeviceBleStatus, device: APIHeartRate.BleDevice?)
  public func bleConnectError(error: APIHeartRate.BleConnectError, device: APIHeartRate.BleDevice?)
  public func didDiscoveryWith(devices: [APIHeartRate.BleDicoveryDevice])
  public func didFinishDiscoveryWith(devices: [APIHeartRate.BleDicoveryDevice])
  public func bleCommonError(error: APIHeartRate.BleCommonError)
  public func bleAvailability(status: APIHeartRate.BleAvailability)
  public func bleOtaError(error: APIHeartRate.OtaError)
  public func bleOtaStauts(status: APIHeartRate.OtaStatus, progress: Swift.Float)
  public func summaryHeartRateInfo(info: [[Swift.String : Any]])
  public func summaryStepsInfo(info: [[Swift.String : Any]])
  public func summaryBloodOxygenInfo(info: [[Swift.String : Any]])
  public func summaryPressureIndexInfo(info: [[Swift.String : Any]])
  public func summaryCalorieInfo(info: [[Swift.String : Any]])
  public func summarySleepInfo(info: [[Swift.String : Any]])
  public func summaryExerciseInfo(info: [[Swift.String : Any]])
  public func motionDataInfo(info: [[Swift.String : Any]])
}
@_hasMissingDesignatedInitializers public class HRRemoteCentral : APIHeartRate.HRRemotePeer {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class APIHeartRateManager {
  public static let instance: APIHeartRate.APIHeartRateManager
  public func addObserver(observer: APIHeartRate.APIHeartRateObserver)
  public func removeObserver(observer: APIHeartRate.APIHeartRateObserver)
  public func startScan(timeOut: Swift.Double = 0)
  public func stopScan()
  public func getPairedDevices(uuid: [Foundation.UUID]) -> [APIHeartRate.BleDicoveryDevice]
  public func connectToDeviceByDeviceId(deviceId: Swift.String)
  public func connectToDevice(device: APIHeartRate.BleDicoveryDevice)
  public func getMac()
  public func readDeviceBatteryPower()
  public func getManufacturerName()
  public func getModelName()
  public func getHardwareVersion()
  public func getFirmwareVersion()
  public func getSoftwareVersion()
  public func getSystemID()
  public func requestDisconnect()
  public func setHeartRateThreshold(min: Swift.UInt8, max: Swift.UInt8)
  public func getSerialNum()
  public func getStepFrequency()
  public func getRTOxygen()
  public func getHeartRate()
  public func syncDeviceTime()
  public func resetBand()
  public func readCharacteristicValue(characteristicUuid: Swift.String)
  public func setCharacteristicNotification(characteristicUuid: Swift.String, enabled: Swift.Bool)
  public func writeToBle(characteristicUuid: Swift.String, cmd: Foundation.Data)
  public func startSendOTAFile(data: Foundation.Data)
  public func queryBatteryStatus()
  public func getSummaryHeartRate(startDateStamp: Swift.Double, endDateStamp: Swift.Double)
  public func getSummarySteps(startDateStamp: Swift.Double, endDateStamp: Swift.Double)
  public func getSummaryBloodOxygen(startDateStamp: Swift.Double, endDateStamp: Swift.Double)
  public func getSummaryPressureIndex(startDateStamp: Swift.Double, endDateStamp: Swift.Double)
  public func getSummaryCalorie(startDateStamp: Swift.Double, endDateStamp: Swift.Double)
  public func getSummarySleep(startDateStamp: Swift.Double, endDateStamp: Swift.Double)
  public func getExerciseData(startDateStamp: Swift.Double, endDateStamp: Swift.Double)
  public func getMotionData(pageSize: Swift.Int, sportMode: Swift.Bool)
  @objc deinit
}
public func == (lhs: APIHeartRate.BleAvailability, rhs: APIHeartRate.BleAvailability) -> Swift.Bool
public enum BleAvailability : Swift.Equatable {
  case available
  case unavailable(cause: APIHeartRate.BleUnavailabilityCause)
}
public enum BleUnavailabilityCause : Swift.ExpressibleByNilLiteral {
  case any
  case resetting
  case unsupported
  case unauthorized
  case poweredOff
  public init(nilLiteral: Swift.Void)
  public static func == (a: APIHeartRate.BleUnavailabilityCause, b: APIHeartRate.BleUnavailabilityCause) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol HRAvailabilityObservable : AnyObject {
  var availabilityObservers: [APIHeartRate.HRWeakAvailabilityObserver] { get set }
  func addAvailabilityObserver(_ availabilityObserver: APIHeartRate.HRAvailabilityObserver)
  func removeAvailabilityObserver(_ availabilityObserver: APIHeartRate.HRAvailabilityObserver)
}
@_hasMissingDesignatedInitializers public class HRWeakAvailabilityObserver {
  @objc deinit
}
extension APIHeartRate.HRAvailabilityObservable {
  public func addAvailabilityObserver(_ availabilityObserver: APIHeartRate.HRAvailabilityObserver)
  public func removeAvailabilityObserver(_ availabilityObserver: APIHeartRate.HRAvailabilityObserver)
}
public protocol HRAvailabilityObserver : AnyObject {
  func availabilityObserver(_ availabilityObservable: APIHeartRate.HRAvailabilityObservable, availabilityDidChange availability: APIHeartRate.BleAvailability)
  func availabilityObserver(_ availabilityObservable: APIHeartRate.HRAvailabilityObservable, unavailabilityCauseDidChange unavailabilityCause: APIHeartRate.BleUnavailabilityCause)
}
public func == (lhs: APIHeartRate.HRDiscoveriesChange, rhs: APIHeartRate.HRDiscoveriesChange) -> Swift.Bool
public enum HRDiscoveriesChange : Swift.Equatable {
  case insert(discovery: APIHeartRate.BleDicoveryDevice?)
  case remove(discovery: APIHeartRate.BleDicoveryDevice?)
  public var discovery: APIHeartRate.BleDicoveryDevice! {
    get
  }
}
public class HRConfiguration {
  final public let serviceCBUUIDs: [CoreBluetooth.CBUUID]
  public init(dataServiceUUIDs: [CoreBluetooth.CBUUID])
  @objc deinit
}
public typealias HRSendDataCompletionHandler = ((_ data: Foundation.Data, _ remotePeer: APIHeartRate.HRRemotePeer, _ error: APIHeartRate.BleCommonError?) -> Swift.Void)
@_hasMissingDesignatedInitializers public class HRPeer {
  public var configuration: APIHeartRate.HRConfiguration? {
    get
  }
  public func sendData(_ data: Foundation.Data, toRemotePeer remotePeer: APIHeartRate.HRRemotePeer, completionHandler: APIHeartRate.HRSendDataCompletionHandler?)
  @objc deinit
}
public protocol HRRemotePeerDelegate : AnyObject {
  func remotePeer(characteristic: CoreBluetooth.CBCharacteristic, _ remotePeer: APIHeartRate.HRRemotePeer, didSendArbitraryData data: Foundation.Data)
  func remotePeerDidWriteData()
}
public func == (lhs: APIHeartRate.HRRemotePeer, rhs: APIHeartRate.HRRemotePeer) -> Swift.Bool
@_hasMissingDesignatedInitializers public class HRRemotePeer : Swift.Equatable {
  final public let identifier: Foundation.UUID
  final public let deviceId: Swift.String
  weak public var delegate: APIHeartRate.HRRemotePeerDelegate?
  @objc deinit
}
public func == (lhs: APIHeartRate.BleDicoveryDevice, rhs: APIHeartRate.BleDicoveryDevice) -> Swift.Bool
public struct BleDicoveryDevice : Swift.Equatable {
  public var localName: Swift.String
  public let advertisementData: [Swift.String : Any]
  public let remotePeripheral: APIHeartRate.BleDevice
  public let RSSI: Swift.Int
  public let macAddress: Swift.String
  public let deviceId: Swift.String
  public init(advertisementData: [Swift.String : Any], remotePeripheral: APIHeartRate.BleDevice, RSSI: Swift.Int, macAddress: Swift.String, name: Swift.String?)
}
public protocol HRPeripheralDelegate : AnyObject {
  func peripheral(_ peripheral: APIHeartRate.HRPeripheral, remoteCentralDidConnect remoteCentral: APIHeartRate.HRRemoteCentral)
  func peripheral(_ peripheral: APIHeartRate.HRPeripheral, remoteCentralDidDisconnect remoteCentral: APIHeartRate.HRRemoteCentral)
}
@_inheritsConvenienceInitializers public class HRPeripheral : APIHeartRate.HRPeer, APIHeartRate.HRAvailabilityObservable {
  public var availability: APIHeartRate.BleAvailability {
    get
  }
  override public var configuration: APIHeartRate.HRPeripheralConfiguration? {
    get
  }
  weak public var delegate: APIHeartRate.HRPeripheralDelegate?
  public var availabilityObservers: [APIHeartRate.HRWeakAvailabilityObserver]
  public var connectedRemoteCentrals: [APIHeartRate.HRRemoteCentral] {
    get
  }
  public init()
  public func startWithConfiguration(_ configuration: APIHeartRate.HRPeripheralConfiguration) throws
  public func stop() throws
  @objc deinit
}
public enum OtaError : Swift.Error {
  case invalidFile
  case interputed
  case invalidResponse
  case reSend(Swift.Int, Swift.Int)
}
public enum OtaStatus {
  case start(Swift.Int)
  case writeStart
  case writeEnd
  case erase
  case inProgress(Swift.Int, Swift.Int)
  case finish
  case failed
  case compete
}
extension APIHeartRate.BleDevice.ReadType : Swift.Equatable {}
extension APIHeartRate.BleDevice.ReadType : Swift.Hashable {}
extension APIHeartRate.BleDevice.State : Swift.Equatable {}
extension APIHeartRate.BleDevice.State : Swift.Hashable {}
extension APIHeartRate.HRCentral.ContinuousScanState : Swift.Equatable {}
extension APIHeartRate.HRCentral.ContinuousScanState : Swift.Hashable {}
extension APIHeartRate.DeviceBleStatus : Swift.Equatable {}
extension APIHeartRate.DeviceBleStatus : Swift.Hashable {}
extension APIHeartRate.BatteryStatus : Swift.Equatable {}
extension APIHeartRate.BatteryStatus : Swift.Hashable {}
extension APIHeartRate.BleUnavailabilityCause : Swift.Equatable {}
extension APIHeartRate.BleUnavailabilityCause : Swift.Hashable {}
